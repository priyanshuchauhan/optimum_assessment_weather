{"version":3,"sources":["components/WeatherToday.js","components/WeekForcast.js","utils/constants.js","components/CityDropdown.js","utils/apiUtil.js","App.js","serviceWorker.js","index.js"],"names":["WeatherToday","_ref","currentWeather","cityName","react_default","a","createElement","Fragment","className","dayNameFull","description","src","weatherIcon","alt","temperature","humidity","pressure","windSpeed","WeekForcast","forcast","updateTodayWeather","_useState","useState","_useState2","Object","slicedToArray","currentDay","setCurrentDay","useEffect","newWeather","find","forcastInstance","dayName","map","key","onClick","tempMax","tempMin","tempUnit","appID","apiRootURL","weatherIconURL","cityList","daysInWeekShortHand","daysInWeek","CityDropdown","handleCityChange","htmlFor","id","onChange","e","target","value","city","getWeatherReport","fetch","url","URL","searchParams","append","cachedData","sessionStorage","Promise","resolve","JSON","parse","href","then","results","json","data","weatherListResponse","list","forEach","dataInstance","utcSeconds","dt","weatherDate","Date","weatherMeta","weather","date","getDate","getDay","formattedResponse","main","temp","temp_max","Math","trunc","temp_min","wind","speed","icon","concat","keys","stringify","getWeatherReportDI","App","setCityName","_useState3","_useState4","setCurrentWeather","_useState5","_useState6","setForCastWeather","weatherList","components_CityDropdown","selectedCity","components_WeatherToday","components_WeekForcast","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b4ef61b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Function component to render today's weather information.\r\n * @param {Object} currentWeather basic information\r\n * @param {String} cityName prop\r\n * @returns {Component} Week forcast component\r\n */\r\nfunction WeatherToday({ currentWeather, cityName }) {\r\n  if (!currentWeather) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"city-name\">{cityName}</div>\r\n      <div className=\"\">{currentWeather.dayNameFull}, 12:00 am</div>\r\n      <div className=\"\">{currentWeather.description}</div>\r\n\r\n      <div className=\"today-main-content\">\r\n        <div className=\"weather-image-parent\">\r\n          <img\r\n            src={currentWeather.weatherIcon}\r\n            alt={currentWeather.description}\r\n          />\r\n          <span className=\"today-temparature\">\r\n            {currentWeather.temperature}\r\n          </span>\r\n          <span>°C</span>\r\n        </div>\r\n        <div className=\"additional-info\">\r\n          <div>\r\n            Humidity: <span>{currentWeather.humidity}%</span>\r\n          </div>\r\n          <div>\r\n            Pressure: <span>{currentWeather.pressure}mb</span>\r\n          </div>\r\n          <div>\r\n            Wind: <span>{currentWeather.windSpeed}km/hr</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nWeatherToday.propTypes = {\r\n  currentWeather: PropTypes.object.isRequired,\r\n  cityName: PropTypes.string.isRequired\r\n}\r\n\r\nexport default WeatherToday;","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Function component to render one week forcast.\r\n * New API call would be made on day change.\r\n * @param {List} forcast prop with list for a week\r\n * @returns {Component} Week forcast component\r\n */\r\nfunction WeekForcast({ forcast, updateTodayWeather }) {\r\n  const [currentDay, setCurrentDay] = useState(\"Monday\");\r\n\r\n  useEffect(() => {\r\n    const newWeather = forcast.find(\r\n      forcastInstance => forcastInstance.dayName === currentDay\r\n    );\r\n    newWeather && updateTodayWeather(newWeather);\r\n  }, [forcast, updateTodayWeather, currentDay]);\r\n\r\n  if (!forcast) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"forcast-wrapper\">\r\n      {forcast.map(forcastInstance => (\r\n        <span\r\n          key={forcastInstance.dayName}\r\n          onClick={() => setCurrentDay(forcastInstance.dayName)}\r\n          className=\"forcast-section\"\r\n        >\r\n          <span className=\"forcast-image-wrapper\">\r\n            <span className=\"forcast-day\">{forcastInstance.dayName}</span>\r\n            <img\r\n              src={forcastInstance.weatherIcon}\r\n              alt={forcastInstance.description}\r\n            />\r\n            <span>\r\n                {forcastInstance.tempMax}° &nbsp;\r\n                {forcastInstance.tempMin}°\r\n            </span>\r\n          </span>\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nWeekForcast.propTypes = {\r\n  forcast: PropTypes.array.isRequired,\r\n  updateTodayWeather: PropTypes.func.isRequired\r\n}\r\n\r\nexport default WeekForcast;","export const tempUnit = \"metric\";\r\nexport const appID = \"4281f1dfc472741e8cb4a56f4ec88f88\";\r\nexport const apiRootURL = `https://api.openweathermap.org/data/2.5/forecast`;\r\nexport const weatherIconURL = 'http://openweathermap.org/img/w/';\r\n\r\nexport const cityList = [\r\n  \"Singapore\",\r\n  \"London\",\r\n  \"Berlin\",\r\n  \"Dehradun\",\r\n  \"Hong Kong\"\r\n];\r\n\r\nexport const daysInWeekShortHand = [\r\n  \"Sun\",\r\n  \"Mon\",\r\n  \"Tues\",\r\n  \"Wed\",\r\n  \"Thurs\",\r\n  \"Fri\",\r\n  \"Sat\"\r\n];\r\n\r\nexport const daysInWeek = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\"\r\n];","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { cityList } from \"../utils/constants\";\r\n\r\n/**\r\n * Function component to render today's weather information.\r\n * @param {Function} handleCityChange callback function to update city\r\n * @returns {Component} Dropdown to select city\r\n */\r\nfunction CityDropdown({ handleCityChange }) {\r\n  if (!handleCityChange) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n      <div className=\"dropdown-wrapper\">\r\n      <label htmlFor=\"city-dropdown\" className=\"city-dropdown-label\">Select City</label>\r\n      <select\r\n        id=\"city-dropdown\"\r\n        onChange={e => handleCityChange(e.target.value)}\r\n        className=\"dropdown\"\r\n      >\r\n        {cityList.map(city => (\r\n          <option value={city} key={city}>\r\n            {city}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      </div>\r\n  );\r\n}\r\n\r\nCityDropdown.propTypes = {\r\n  handleCityChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CityDropdown;","import {\r\n  tempUnit,\r\n  appID,\r\n  apiRootURL,\r\n  weatherIconURL,\r\n  daysInWeek,\r\n  daysInWeekShortHand\r\n} from \"./constants\";\r\n\r\n/**\r\n * Factory function to inject fetch dependency for testing\r\n *\r\n * @param {String} cityName example \"London\"\r\n * @returns {Promise} Either API call promise or localstore wrapped promise\r\n */\r\nexport default function getWeatherReport(cityName) {\r\n  return getWeatherReportDI(fetch, cityName);\r\n}\r\n\r\n/**\r\n * Function to make async call to get weather details for the provided city\r\n * Caching: In case the API has alreay been called for the city\r\n * then localstorage data will be used\r\n *\r\n * @param {String} cityName example \"London\"\r\n * @param {function} fetch Dependency Injection for testing\r\n * @returns {Promise} Either API call promise or localstore wrapped promise\r\n */\r\nexport function getWeatherReportDI(fetch, cityName) {\r\n  const url = new URL(apiRootURL);\r\n  url.searchParams.append(\"q\", cityName);\r\n  url.searchParams.append(\"units\", tempUnit);\r\n  url.searchParams.append(\"appid\", appID);\r\n\r\n  const cachedData = sessionStorage[cityName];\r\n  if (cachedData) {\r\n    return Promise.resolve(JSON.parse(cachedData));\r\n  }\r\n\r\n  const weatherList = fetch(url.href)\r\n    .then(results => results.json())\r\n    .then(data => {\r\n      if (!data) {\r\n        return;\r\n      }\r\n\r\n      let weatherListResponse = {};\r\n      data.list.forEach(dataInstance => {\r\n        const utcSeconds = dataInstance.dt;\r\n        const weatherDate = utcSeconds && new Date(utcSeconds * 1000);\r\n        const weatherMeta = dataInstance.weather;\r\n\r\n        const date = weatherDate.getDate();\r\n        // Check to avoid adding multiple results for same date\r\n        if (weatherListResponse[date]) {\r\n          return;\r\n        }\r\n\r\n        const dayName = daysInWeekShortHand[weatherDate.getDay()];\r\n        const dayNameFull = daysInWeek[weatherDate.getDay()];\r\n\r\n        const formattedResponse = {\r\n          date: weatherDate,\r\n          dayName,\r\n          dayNameFull,\r\n          humidity: dataInstance.main.humidity,\r\n          pressure: dataInstance.main.pressure,\r\n          temperature: dataInstance.main.temp,\r\n          tempMax: dataInstance.main.temp_max && Math.trunc(dataInstance.main.temp_max),\r\n          tempMin: dataInstance.main.temp_min && Math.trunc(dataInstance.main.temp_min),\r\n          windSpeed: dataInstance.wind.speed,\r\n          description: weatherMeta && weatherMeta[0].main,\r\n          weatherIcon: weatherMeta && weatherMeta[0].icon\r\n        };\r\n        formattedResponse.weatherIcon = `${weatherIconURL}${\r\n          formattedResponse.weatherIcon\r\n        }.png`;\r\n        weatherListResponse[date] = formattedResponse;\r\n      });\r\n      weatherListResponse = Object.keys(weatherListResponse).map(\r\n        date => weatherListResponse[date]\r\n      );\r\n\r\n      sessionStorage[cityName] = JSON.stringify(weatherListResponse);\r\n      return weatherListResponse;\r\n    });\r\n  return weatherList;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles/App.css\";\nimport WeatherToday from \"./components/WeatherToday\";\nimport WeekForcast from \"./components/WeekForcast\";\nimport CityDropdown from \"./components/CityDropdown\";\nimport getWeatherReport from \"./utils/apiUtil\";\n\nfunction App() {\n  const [cityName, setCityName] = useState(\"Singapore\");\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forcast, setForCastWeather] = useState(null);\n\n  useEffect(() => {\n    getWeatherReport(cityName).then(weatherList => {\n      setCurrentWeather(weatherList[0]);\n      setForCastWeather(weatherList);\n    });\n  }, [cityName]);\n\n  return (\n    <div className=\"Weather-App\">\n      {(!currentWeather || !forcast) && \"Loading...\"}\n\n      {currentWeather && forcast && (\n        <div className=\"report-wrapper\">\n          <CityDropdown\n            handleCityChange={selectedCity => setCityName(selectedCity)}\n          />\n          <WeatherToday currentWeather={currentWeather} cityName={cityName} />\n          <br />\n          <WeekForcast\n            forcast={forcast}\n            updateTodayWeather={newWeather => setCurrentWeather(newWeather)}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}